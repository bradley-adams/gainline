definitions:
  api.CompetitionRequest:
    properties:
      name:
        type: string
    type: object
  api.CompetitionResponse:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  api.SeasonRequest:
    properties:
      end_date:
        type: string
      rounds:
        type: integer
      start_date:
        type: string
    type: object
  api.SeasonResponse:
    properties:
      competition_id:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      end_date:
        type: string
      id:
        type: string
      rounds:
        type: integer
      start_date:
        type: string
      updated_at:
        type: string
    type: object
  api.TeamRequest:
    properties:
      abbreviation:
        type: string
      location:
        type: string
      name:
        type: string
    type: object
  api.TeamResponse:
    properties:
      abbreviation:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      location:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  response.ErrorResponse:
    properties:
      message:
        type: string
    type: object
info:
  contact: {}
  description: A set of endpoints for managing gainline tasks
  title: Gainline Api
  version: "1.0"
paths:
  /competitions:
    get:
      operationId: get-competitions
      produces:
      - application/json
      responses:
        "200":
          description: List of competitions
          schema:
            items:
              $ref: '#/definitions/api.CompetitionResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve all competitions
      tags:
      - Competitions
    post:
      consumes:
      - application/json
      operationId: create-competition
      parameters:
      - description: Competition details to create
        in: body
        name: competition
        required: true
        schema:
          $ref: '#/definitions/api.CompetitionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successful operation
          schema:
            $ref: '#/definitions/api.CompetitionResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new competition
      tags:
      - Competitions
  /competitions/{competitionID}:
    delete:
      operationId: delete-competition
      parameters:
      - description: UUID of the competition
        in: path
        name: competitionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Successfully deleted
          schema:
            type: string
        "400":
          description: Invalid competition ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete a competition
      tags:
      - Competitions
    get:
      operationId: get-competition
      parameters:
      - description: UUID of the competition
        in: path
        name: competitionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Competition found
          schema:
            $ref: '#/definitions/api.CompetitionResponse'
        "400":
          description: Invalid competition ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get a single competition by ID
      tags:
      - Competitions
    put:
      consumes:
      - application/json
      operationId: update-competition
      parameters:
      - description: UUID of the competition
        in: path
        name: competitionID
        required: true
        type: string
      - description: Competition details to update
        in: body
        name: competition
        required: true
        schema:
          $ref: '#/definitions/api.CompetitionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Competition updated
          schema:
            $ref: '#/definitions/api.CompetitionResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update an existing competition
      tags:
      - Competitions
  /competitions/{competitionID}/seasons:
    get:
      operationId: get-seasons
      parameters:
      - description: Competition ID
        in: path
        name: competitionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of seasons
          schema:
            items:
              $ref: '#/definitions/api.SeasonResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve all seasons for a competition
      tags:
      - Seasons
    post:
      consumes:
      - application/json
      operationId: create-season
      parameters:
      - description: Competition ID
        in: path
        name: competitionID
        required: true
        type: string
      - description: Season details to create
        in: body
        name: season
        required: true
        schema:
          $ref: '#/definitions/api.SeasonRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successful operation
          schema:
            $ref: '#/definitions/api.SeasonResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new season
      tags:
      - Seasons
  /competitions/{competitionID}/seasons/{seasonID}:
    delete:
      operationId: delete-season
      parameters:
      - description: Competition ID
        in: path
        name: competitionID
        required: true
        type: string
      - description: Season ID
        in: path
        name: seasonID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: "No Content\"\t\"Season deleted successfully"
        "400":
          description: Invalid season ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete a season by ID
      tags:
      - Seasons
    get:
      operationId: get-season
      parameters:
      - description: Competition ID
        in: path
        name: competitionID
        required: true
        type: string
      - description: Season ID
        in: path
        name: seasonID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Season found
          schema:
            $ref: '#/definitions/api.SeasonResponse'
        "400":
          description: Invalid season ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get a single season by ID
      tags:
      - Seasons
    put:
      consumes:
      - application/json
      operationId: update-season
      parameters:
      - description: Competition ID
        in: path
        name: competitionID
        required: true
        type: string
      - description: Season ID
        in: path
        name: seasonID
        required: true
        type: string
      - description: Season details to update
        in: body
        name: season
        required: true
        schema:
          $ref: '#/definitions/api.SeasonRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Season updated
          schema:
            $ref: '#/definitions/api.SeasonResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update an existing season
      tags:
      - Seasons
  /teams:
    get:
      operationId: get-teams
      produces:
      - application/json
      responses:
        "200":
          description: List of teams
          schema:
            items:
              $ref: '#/definitions/api.TeamResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Retrieve all teams
      tags:
      - Teams
    post:
      consumes:
      - application/json
      operationId: create-team
      parameters:
      - description: Team details to create
        in: body
        name: team
        required: true
        schema:
          $ref: '#/definitions/api.TeamRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successful operation
          schema:
            $ref: '#/definitions/api.TeamResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new team
      tags:
      - Teams
  /teams/{teamID}:
    delete:
      operationId: delete-team
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: "No Content\"\t\"Team deleted successfully"
        "400":
          description: Invalid team ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete a team by ID
      tags:
      - Teams
    get:
      operationId: get-team
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Team found
          schema:
            $ref: '#/definitions/api.TeamResponse'
        "400":
          description: Invalid team ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get a single team by ID
      tags:
      - Teams
    put:
      consumes:
      - application/json
      operationId: update-team
      parameters:
      - description: Team ID
        in: path
        name: teamID
        required: true
        type: string
      - description: Team details to update
        in: body
        name: team
        required: true
        schema:
          $ref: '#/definitions/api.TeamRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Team updated
          schema:
            $ref: '#/definitions/api.TeamResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update an existing team
      tags:
      - Teams
swagger: "2.0"
