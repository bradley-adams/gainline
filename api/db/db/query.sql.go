// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createCompetition = `-- name: CreateCompetition :exec
INSERT INTO competitions (
    id,
    name,
    created_at,
    updated_at,
    deleted_at
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
`

type CreateCompetitionParams struct {
	ID        uuid.UUID
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt sql.NullTime
}

// Insert a new competition into the database
func (q *Queries) CreateCompetition(ctx context.Context, arg CreateCompetitionParams) error {
	_, err := q.db.ExecContext(ctx, createCompetition,
		arg.ID,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
	)
	return err
}

const getCompetition = `-- name: GetCompetition :one
SELECT 
	id,
	name,
	created_at,
	updated_at,
	deleted_at 
FROM 
	competitions
WHERE 
	id = $1
AND
	deleted_at IS NULL
`

// Fetch a competition by id, excluding soft-deleted competitions
func (q *Queries) GetCompetition(ctx context.Context, id uuid.UUID) (Competition, error) {
	row := q.db.QueryRowContext(ctx, getCompetition, id)
	var i Competition
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
