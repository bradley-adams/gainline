// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bradley-adams/gainline/db/db_handler (interfaces: DB,Queries)
//
// Generated by this command:
//
//	mockgen -destination=/home/bradley/Personal/gainline/api/db/db_handler/mock/db.go -package=mock_db github.com/bradley-adams/gainline/db/db_handler DB,Queries
//

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	db "github.com/bradley-adams/gainline/db/db"
	db_handler "github.com/bradley-adams/gainline/db/db_handler"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockDB) BeginTx(arg0 context.Context, arg1 *sql.TxOptions) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", arg0, arg1)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockDBMockRecorder) BeginTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockDB)(nil).BeginTx), arg0, arg1)
}

// Commit mocks base method.
func (m *MockDB) Commit(arg0 *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockDBMockRecorder) Commit(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockDB)(nil).Commit), arg0)
}

// ExecContext mocks base method.
func (m *MockDB) ExecContext(arg0 context.Context, arg1 string, arg2 ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockDBMockRecorder) ExecContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockDB)(nil).ExecContext), varargs...)
}

// HealthCheck mocks base method.
func (m *MockDB) HealthCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockDBMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockDB)(nil).HealthCheck))
}

// New mocks base method.
func (m *MockDB) New(arg0 db.DBTX) db_handler.Queries {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0)
	ret0, _ := ret[0].(db_handler.Queries)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockDBMockRecorder) New(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockDB)(nil).New), arg0)
}

// PrepareContext mocks base method.
func (m *MockDB) PrepareContext(arg0 context.Context, arg1 string) (*sql.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareContext", arg0, arg1)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContext indicates an expected call of PrepareContext.
func (mr *MockDBMockRecorder) PrepareContext(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContext", reflect.TypeOf((*MockDB)(nil).PrepareContext), arg0, arg1)
}

// QueryContext mocks base method.
func (m *MockDB) QueryContext(arg0 context.Context, arg1 string, arg2 ...any) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockDBMockRecorder) QueryContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockDB)(nil).QueryContext), varargs...)
}

// QueryRowContext mocks base method.
func (m *MockDB) QueryRowContext(arg0 context.Context, arg1 string, arg2 ...any) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockDBMockRecorder) QueryRowContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockDB)(nil).QueryRowContext), varargs...)
}

// Rollback mocks base method.
func (m *MockDB) Rollback(arg0 *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockDBMockRecorder) Rollback(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockDB)(nil).Rollback), arg0)
}

// MockQueries is a mock of Queries interface.
type MockQueries struct {
	ctrl     *gomock.Controller
	recorder *MockQueriesMockRecorder
}

// MockQueriesMockRecorder is the mock recorder for MockQueries.
type MockQueriesMockRecorder struct {
	mock *MockQueries
}

// NewMockQueries creates a new mock instance.
func NewMockQueries(ctrl *gomock.Controller) *MockQueries {
	mock := &MockQueries{ctrl: ctrl}
	mock.recorder = &MockQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueries) EXPECT() *MockQueriesMockRecorder {
	return m.recorder
}

// CreateCompetition mocks base method.
func (m *MockQueries) CreateCompetition(arg0 context.Context, arg1 db.CreateCompetitionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompetition", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCompetition indicates an expected call of CreateCompetition.
func (mr *MockQueriesMockRecorder) CreateCompetition(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompetition", reflect.TypeOf((*MockQueries)(nil).CreateCompetition), arg0, arg1)
}

// CreateGame mocks base method.
func (m *MockQueries) CreateGame(arg0 context.Context, arg1 db.CreateGameParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGame", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGame indicates an expected call of CreateGame.
func (mr *MockQueriesMockRecorder) CreateGame(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGame", reflect.TypeOf((*MockQueries)(nil).CreateGame), arg0, arg1)
}

// CreateSeason mocks base method.
func (m *MockQueries) CreateSeason(arg0 context.Context, arg1 db.CreateSeasonParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSeason", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSeason indicates an expected call of CreateSeason.
func (mr *MockQueriesMockRecorder) CreateSeason(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSeason", reflect.TypeOf((*MockQueries)(nil).CreateSeason), arg0, arg1)
}

// CreateSeasonTeams mocks base method.
func (m *MockQueries) CreateSeasonTeams(arg0 context.Context, arg1 db.CreateSeasonTeamsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSeasonTeams", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSeasonTeams indicates an expected call of CreateSeasonTeams.
func (mr *MockQueriesMockRecorder) CreateSeasonTeams(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSeasonTeams", reflect.TypeOf((*MockQueries)(nil).CreateSeasonTeams), arg0, arg1)
}

// CreateTeam mocks base method.
func (m *MockQueries) CreateTeam(arg0 context.Context, arg1 db.CreateTeamParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockQueriesMockRecorder) CreateTeam(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockQueries)(nil).CreateTeam), arg0, arg1)
}

// DeleteCompetition mocks base method.
func (m *MockQueries) DeleteCompetition(arg0 context.Context, arg1 db.DeleteCompetitionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompetition", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCompetition indicates an expected call of DeleteCompetition.
func (mr *MockQueriesMockRecorder) DeleteCompetition(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompetition", reflect.TypeOf((*MockQueries)(nil).DeleteCompetition), arg0, arg1)
}

// DeleteGame mocks base method.
func (m *MockQueries) DeleteGame(arg0 context.Context, arg1 db.DeleteGameParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGame", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGame indicates an expected call of DeleteGame.
func (mr *MockQueriesMockRecorder) DeleteGame(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGame", reflect.TypeOf((*MockQueries)(nil).DeleteGame), arg0, arg1)
}

// DeleteGamesByCompetitionID mocks base method.
func (m *MockQueries) DeleteGamesByCompetitionID(arg0 context.Context, arg1 db.DeleteGamesByCompetitionIDParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGamesByCompetitionID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGamesByCompetitionID indicates an expected call of DeleteGamesByCompetitionID.
func (mr *MockQueriesMockRecorder) DeleteGamesByCompetitionID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGamesByCompetitionID", reflect.TypeOf((*MockQueries)(nil).DeleteGamesByCompetitionID), arg0, arg1)
}

// DeleteGamesBySeasonID mocks base method.
func (m *MockQueries) DeleteGamesBySeasonID(arg0 context.Context, arg1 db.DeleteGamesBySeasonIDParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGamesBySeasonID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGamesBySeasonID indicates an expected call of DeleteGamesBySeasonID.
func (mr *MockQueriesMockRecorder) DeleteGamesBySeasonID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGamesBySeasonID", reflect.TypeOf((*MockQueries)(nil).DeleteGamesBySeasonID), arg0, arg1)
}

// DeleteSeason mocks base method.
func (m *MockQueries) DeleteSeason(arg0 context.Context, arg1 db.DeleteSeasonParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSeason", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSeason indicates an expected call of DeleteSeason.
func (mr *MockQueriesMockRecorder) DeleteSeason(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeason", reflect.TypeOf((*MockQueries)(nil).DeleteSeason), arg0, arg1)
}

// DeleteSeasonTeam mocks base method.
func (m *MockQueries) DeleteSeasonTeam(arg0 context.Context, arg1 db.DeleteSeasonTeamParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSeasonTeam", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSeasonTeam indicates an expected call of DeleteSeasonTeam.
func (mr *MockQueriesMockRecorder) DeleteSeasonTeam(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeasonTeam", reflect.TypeOf((*MockQueries)(nil).DeleteSeasonTeam), arg0, arg1)
}

// DeleteSeasonTeamsBySeasonID mocks base method.
func (m *MockQueries) DeleteSeasonTeamsBySeasonID(arg0 context.Context, arg1 db.DeleteSeasonTeamsBySeasonIDParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSeasonTeamsBySeasonID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSeasonTeamsBySeasonID indicates an expected call of DeleteSeasonTeamsBySeasonID.
func (mr *MockQueriesMockRecorder) DeleteSeasonTeamsBySeasonID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeasonTeamsBySeasonID", reflect.TypeOf((*MockQueries)(nil).DeleteSeasonTeamsBySeasonID), arg0, arg1)
}

// DeleteSeasonsByCompetitionID mocks base method.
func (m *MockQueries) DeleteSeasonsByCompetitionID(arg0 context.Context, arg1 db.DeleteSeasonsByCompetitionIDParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSeasonsByCompetitionID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSeasonsByCompetitionID indicates an expected call of DeleteSeasonsByCompetitionID.
func (mr *MockQueriesMockRecorder) DeleteSeasonsByCompetitionID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeasonsByCompetitionID", reflect.TypeOf((*MockQueries)(nil).DeleteSeasonsByCompetitionID), arg0, arg1)
}

// DeleteTeam mocks base method.
func (m *MockQueries) DeleteTeam(arg0 context.Context, arg1 db.DeleteTeamParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeam", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeam indicates an expected call of DeleteTeam.
func (mr *MockQueriesMockRecorder) DeleteTeam(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*MockQueries)(nil).DeleteTeam), arg0, arg1)
}

// GetCompetition mocks base method.
func (m *MockQueries) GetCompetition(arg0 context.Context, arg1 uuid.UUID) (db.Competition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompetition", arg0, arg1)
	ret0, _ := ret[0].(db.Competition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompetition indicates an expected call of GetCompetition.
func (mr *MockQueriesMockRecorder) GetCompetition(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompetition", reflect.TypeOf((*MockQueries)(nil).GetCompetition), arg0, arg1)
}

// GetCompetitions mocks base method.
func (m *MockQueries) GetCompetitions(arg0 context.Context) ([]db.Competition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompetitions", arg0)
	ret0, _ := ret[0].([]db.Competition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompetitions indicates an expected call of GetCompetitions.
func (mr *MockQueriesMockRecorder) GetCompetitions(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompetitions", reflect.TypeOf((*MockQueries)(nil).GetCompetitions), arg0)
}

// GetGame mocks base method.
func (m *MockQueries) GetGame(arg0 context.Context, arg1 uuid.UUID) (db.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGame", arg0, arg1)
	ret0, _ := ret[0].(db.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGame indicates an expected call of GetGame.
func (mr *MockQueriesMockRecorder) GetGame(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGame", reflect.TypeOf((*MockQueries)(nil).GetGame), arg0, arg1)
}

// GetGames mocks base method.
func (m *MockQueries) GetGames(arg0 context.Context, arg1 uuid.UUID) ([]db.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGames", arg0, arg1)
	ret0, _ := ret[0].([]db.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGames indicates an expected call of GetGames.
func (mr *MockQueriesMockRecorder) GetGames(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGames", reflect.TypeOf((*MockQueries)(nil).GetGames), arg0, arg1)
}

// GetSeason mocks base method.
func (m *MockQueries) GetSeason(arg0 context.Context, arg1 uuid.UUID) (db.Season, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeason", arg0, arg1)
	ret0, _ := ret[0].(db.Season)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeason indicates an expected call of GetSeason.
func (mr *MockQueriesMockRecorder) GetSeason(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeason", reflect.TypeOf((*MockQueries)(nil).GetSeason), arg0, arg1)
}

// GetSeasonTeams mocks base method.
func (m *MockQueries) GetSeasonTeams(arg0 context.Context, arg1 uuid.UUID) ([]db.GetSeasonTeamsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeasonTeams", arg0, arg1)
	ret0, _ := ret[0].([]db.GetSeasonTeamsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeasonTeams indicates an expected call of GetSeasonTeams.
func (mr *MockQueriesMockRecorder) GetSeasonTeams(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeasonTeams", reflect.TypeOf((*MockQueries)(nil).GetSeasonTeams), arg0, arg1)
}

// GetSeasons mocks base method.
func (m *MockQueries) GetSeasons(arg0 context.Context, arg1 uuid.UUID) ([]db.Season, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeasons", arg0, arg1)
	ret0, _ := ret[0].([]db.Season)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeasons indicates an expected call of GetSeasons.
func (mr *MockQueriesMockRecorder) GetSeasons(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeasons", reflect.TypeOf((*MockQueries)(nil).GetSeasons), arg0, arg1)
}

// GetTeam mocks base method.
func (m *MockQueries) GetTeam(arg0 context.Context, arg1 uuid.UUID) (db.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", arg0, arg1)
	ret0, _ := ret[0].(db.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockQueriesMockRecorder) GetTeam(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockQueries)(nil).GetTeam), arg0, arg1)
}

// GetTeams mocks base method.
func (m *MockQueries) GetTeams(arg0 context.Context) ([]db.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeams", arg0)
	ret0, _ := ret[0].([]db.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeams indicates an expected call of GetTeams.
func (mr *MockQueriesMockRecorder) GetTeams(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeams", reflect.TypeOf((*MockQueries)(nil).GetTeams), arg0)
}

// UpdateCompetition mocks base method.
func (m *MockQueries) UpdateCompetition(arg0 context.Context, arg1 db.UpdateCompetitionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompetition", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCompetition indicates an expected call of UpdateCompetition.
func (mr *MockQueriesMockRecorder) UpdateCompetition(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompetition", reflect.TypeOf((*MockQueries)(nil).UpdateCompetition), arg0, arg1)
}

// UpdateGame mocks base method.
func (m *MockQueries) UpdateGame(arg0 context.Context, arg1 db.UpdateGameParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGame", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGame indicates an expected call of UpdateGame.
func (mr *MockQueriesMockRecorder) UpdateGame(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGame", reflect.TypeOf((*MockQueries)(nil).UpdateGame), arg0, arg1)
}

// UpdateSeason mocks base method.
func (m *MockQueries) UpdateSeason(arg0 context.Context, arg1 db.UpdateSeasonParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSeason", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSeason indicates an expected call of UpdateSeason.
func (mr *MockQueriesMockRecorder) UpdateSeason(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSeason", reflect.TypeOf((*MockQueries)(nil).UpdateSeason), arg0, arg1)
}

// UpdateTeam mocks base method.
func (m *MockQueries) UpdateTeam(arg0 context.Context, arg1 db.UpdateTeamParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeam", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTeam indicates an expected call of UpdateTeam.
func (mr *MockQueriesMockRecorder) UpdateTeam(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeam", reflect.TypeOf((*MockQueries)(nil).UpdateTeam), arg0, arg1)
}
